//  const { db, session } = context;
//       if (!session?.id) throw new GraphQLError("Not authenticated");

//       try {
//         // Validate core trade plan fields that are required for any trade
  

     

        

//         // Handle optional trade targets
//         // If targets are provided, each must be complete with all required fields
//         const targets: (typeof tradeTargets.$inferSelect)[] = [];
//         if (input.targets?.length) {
//           const createdTargets = await Promise.all(
//             input.targets.map(async (target) => {
//               // Ensure all required target fields are provided
//               if (
//                 !target.label ||
//                 target.executedPrice === undefined ||
//                 target.riskReward === undefined ||
//                 target.exitSize === undefined
//               ) {
//                 throw new GraphQLError("Incomplete target fields provided");
//               }

//               // Create the target record with proper type casting for numeric values
//               const [createdTarget] = await db
//                 .insert(tradeTargets)
//                 .values({
//                   tradeId: trade.id,
//                   label: target.label,
//                   executedPrice: String(target.executedPrice),
//                   riskReward: String(target.riskReward),
//                   exitSize: String(target.exitSize),
//                   moveStopTo:
//                     target.moveStopTo !== undefined &&
//                     target.moveStopTo !== null
//                       ? String(target.moveStopTo)
//                       : undefined,
//                 } as TradeTargetInsert)
//                 .returning();

//               return createdTarget;
//             })
//           );
//           targets.push(...createdTargets);
//         }

//         // Return only success and message, not the trade or targets
//         return {
//           success: true,
//           message: "Trade plan created successfully!",
//         };
//       } catch (error) {
//         // Preserve custom GraphQL errors for validation failures
//         if (error instanceof GraphQLError) {
//           throw error;
//         }

//         // Log unexpected errors for debugging while keeping user message generic
//         console.error("Trade plan creation failed:", error);

//         throw new GraphQLError(
//           "Failed to create trade plan. Please try again later."
//         );
//       }
//     },